name: Build & Release Example

on: workflow_dispatch

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: example

    steps:
      - uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          channel: stable

      - run: flutter pub get
      - run: flutter build apk --debug

      - name: Extract Version
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2)
          echo "NEXT_VERSION=$version" >> $GITHUB_ENV

      - name: Get Latest Git Tag
        id: latest_tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
          tag_prefix: 'v'

      - name: Compute Next Version
        id: bump_version
        run: |
          if [ -z "${{ steps.latest_tag.outputs.latest }}" ]; then
            next=${{ env.NEXT_VERSION }}
          else
            latest=${{ steps.latest_tag.outputs.latest }}
            next=$(echo "$latest" | awk -F'[+. ]' '{ OFS="."; n=split($0,a,/\\+|\\./); a[n]++; print a[1]"."a[2]"."a[3]"+"a[4]; }')
          fi
          echo "NEXT_VERSION=$next" >> $GITHUB_ENV

      - name: Check Release Existence
        id: check_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = `v${process.env.NEXT_VERSION}`;
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag,
              });
              core.setOutput('exists', 'true');
            } catch (err) {
              if (err.status === 404) core.setOutput('exists', 'false');
              else throw err;
            }

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEXT_VERSION }}
          release_name: Debug v${{ env.NEXT_VERSION }}
          draft: false
          prerelease: false

      - name: Upload APK
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: example/build/app/outputs/flutter-apk/app-debug.apk
          asset_name: app-debug.apk
          asset_content_type: application/vnd.android.package-archive
